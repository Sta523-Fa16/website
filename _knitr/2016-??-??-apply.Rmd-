---
layout: page
title: apply functions
reading: "<a href='http://adv-r.had.co.nz/Functionals.html'>Adv-R Functionals</a>"
notes: ""
output: 
    ioslides_presentation:
        widescreen: true
slides: false
link: false
---

# Apply functions

## Apply functions {.smaller}

The apply functions are a collection of tools for functional programming in R, they are variations of the `map` function

```{r, eval=FALSE}
??apply
## 
## Help files with alias or concept or title matching ‘apply’ using fuzzy
## matching:
## 
## 
## base::apply             Apply Functions Over Array Margins
## base::.subset           Internal Objects in Package 'base'
## base::by                Apply a Function to a Data Frame Split by
##                         Factors
## base::eapply            Apply a Function Over Values in an Environment
## base::lapply            Apply a Function over a List or Vector
## base::mapply            Apply a Function to Multiple List or Vector
##                         Arguments
## base::rapply            Recursively Apply a Function to a List
## base::tapply            Apply a Function Over a Ragged Array
```

## lapply {.smaller}

Usage: `lapply(X, FUN, ...)`

`lapply` returns a list of the same length as `X`, each element of which is the result of applying `FUN` to the corresponding element of `X`.

<br/>

<div class="columns-2">
```{r}
str(lapply(1:8, sqrt))
str(lapply(1:8, function(x) (x+1)^2))
```
</div>

## {.smaller}

```{r}
str(lapply(1:8, function(x, pow) x^pow, pow=3))
str(lapply(1:8, function(x, pow) x^pow, x=2))
```

## 

```{r}
d = list(n = rnorm(100), e = rexp(100), ln = rlnorm(100))
str(lapply(d, quantile))
```


## sapply {.smaller}

Usage: `sapply(X, FUN, ..., simplify = TRUE, USE.NAMES = TRUE)`

`sapply` is a user-friendly version and wrapper of `lapply` by default returning a vector, matrix or, an array if appropriate.

<br/>

```{r}
sapply(1:8, sqrt)
sapply(1:8, function(x) (x+1)^2)
```

##

```{r}
sapply(1:8, function(x) c(x, x^2, x^3, x^4))
sapply(1:8, function(x) list(x, x^2, x^3, x^4))
```

## 

```{r, echo=FALSE}
set.seed(2014915)
```

```{r}
d = list(norm = rnorm(100), exp = rexp(100), log_norm = rlnorm(100))
sapply(d, quantile)
```

##

```{r}
sapply(2:6, seq)
```


## vapply {.smaller}

Usage: `vapply(X, FUN, FUN.VALUE, ..., USE.NAMES = TRUE)`

`vapply` is similar to `sapply`, but has a pre-specified type of return value, so it can be safer (and sometimes faster) to use.


```{r}
d = list(1:3, 1:7, c(1,1,2,3,4))
```

<div class="columns-2">
```{r, error=TRUE}
sapply(d, function(x) x[x==2])
str(sapply(d, function(x) x[x==1]))
```

```{r, error=TRUE}
vapply(d, function(x) x[x==2], 1)
vapply(d, function(x) x[x==1], 1)
```
<br/>
</div>

##


```{r, error=TRUE}
vapply(1:3, function(x) c(x,letters[x]), c(1,1))
vapply(1:3, function(x) c(x,letters[x]), c("",""))
```

## [ls]apply and data frames {.smaller}

We can easily use these functions with data frames, the key is to remember that a data frame is just a fancy list with atomic vector columns of the same length.

```{r}
df = data.frame(a = 1:6, b = letters[1:6], c = c(TRUE,FALSE))
str(lapply(df, class))
sapply(df, class)
```

## lapply and do.call {.smaller}

By default (usually) the results of each function call within an `sapply` are placed into the columns of the results matrix. If we'd rather have the results form the rows of our results, if for example we were constructing a data frame, a useful approach is the combination of `lapply` and `do.call`.

<div class="columns-2">
```{r}
l = lapply(1:8, function(x) c(x, x^2, x^3, x^4))
str(l)
```
```{r}
do.call(rbind, l)
```
</div>

##

`do.call(rbind, l)` is the equivalent of passing all the elements of `l` as arguments to `rbind`, e.g.

```{r}
rbind(l[[1]], l[[2]], l[[3]], l[[4]],
      l[[5]], l[[6]], l[[7]], l[[8]])
```

##

```{r}
l2 = lapply(1:8, function(x) data.frame(x, x^2, x^3, x^4))
do.call(rbind, l2)
```



## apply {.smaller}

Usage: `apply(X, MARGIN, FUN, ...)`

Apply a function to margins of an array, matrix, or data frame.

<div class="columns-2">
```{r}
(m = matrix(1:12, nrow=4, ncol=3))
apply(m, 1, mean)
apply(m, 2, mean)
apply(m, 1:2, mean)
```
</div>

## 

```{r}
(df = data.frame(a=1:3, b=4:6, c=7:9))
```

<div class="columns-2">
```{r}
apply(df, 1, mean)
str(apply(df, 1, mean))
```
<br/>
```{r}
apply(df, 2, mean)
str(apply(df, 2, mean))
```
</div>

## {.smaller}

<div class="columns-2">

```{r}
(a = array(1:27,c(3,3,3)))
```
<br/>
```{r}
apply(a, 1, sum)
apply(a, 2, sum)
apply(a, 3, sum)
apply(a, 1:2, sum)
```
</div>


## tapply {.smaller}

Usage: `tapply(X, INDEX, FUN = NULL, ..., simplify = TRUE)`

Apply a function to each (non-empty) group of values from `X` as specified by a unique combination of the levels of `INDEX`.

<div class="columns-2">

```{r}
(df = data.frame(data = 3:11, cat1 = rep(1:3,3), 
                 cat2=rep(1:2,c(4,5))))
```
<br/>

```{r}
tapply(df$data, df$cat1, sum)
tapply(df$data, df[,2:3], sum)
```

</div>

## mapply {.smaller}

Usage: `mapply(FUN, ..., MoreArgs = NULL, SIMPLIFY = TRUE, USE.NAMES = TRUE)`

`mapply` is a multivariate version of `sapply`. `mapply` applies `FUN` to the first elements of each `...` argument, the second elements, the third elements, and so on. Arguments are recycled if necessary.

```{r}
m = list(a = 1:3, b = list(3,2,1))
n = list(c = 4:6, d = list(6,5,4))
```


```{r}
mapply(sum, m$a, m$b)
mapply(sum, m$a, m$b, n$c, n$d)
```

## rapply {.smaller}

Usage:

`rapply` is a recursive version of `lapply`. 

```{r}
d = list(a = list(1:3, 4:6), b = 7:9)
```

```{r}
rapply(d, log, how = "unlist")
str(rapply(d, log, how = "list"))
```

##

```{r}
rapply(d, sum, how = "unlist")
str(rapply(d, sum, how = "list"))
```

##

```{r, error=TRUE}
d = list(a = list(1:3, c("A","B","C")), b = 7:9)
```

```{r, error=TRUE}
rapply(d, log, how = "replace")
rapply(d, log, classes="integer", how="replace")
```

## Relative importance?

Based on my very biased opinion:

<div class="centered">
`sapply` / `lappy` / `apply`

`>`

`tapply`

`>>>`

`vapply` / `mapply` / `rapply`
</div>

## Exercise 1 {.smaller}

Lets compare looping and the apply functions.

* First we will construct a large data frame

```{r, eval=FALSE}
set.seed(112)
d = data.frame(matrix(rnorm(1e5 * 10),ncol=10))
d$cat = sample(LETTERS[1:5], 1e5, replace=TRUE)
```

* Implement functions that will find the largest value in each row (ignoring the `cat` column) using
    
    * The `apply` function
    * The `sapply` or `lapply` function
    * The `vapply` function
    * A single `for` loop


## Exercise 2 {.smaller}

Using the original data frame from Exercise 1 do the following:

* Implement functions that find the median value for each of the 10 columns for each of the 5 category levels in the `cat` column using

    * A single `tapply` function
    * `tapply` within a `for` loop
    * `tapply` within a `sapply` or `lapply`


# Benchmarking

```{r, results='hide', echo=FALSE}
options(width = 120)
```

## Benchmarking

* Improved performance comes from iteration, and learning the most common pitfalls

* Don't sweat the small stuff - Coder time vs Run time vs Compute costs

* Measure it, or it didn't happen

* "Premature optimization is the root of all evil (or at least most of it) in programming." -Knuth

## How do we measure?

Simplest tool is R's base `system.time` which can be used to wrap any other call or calls.

```{r}
system.time(rnorm(1e6))
system.time(rnorm(1e4) %*% t(rnorm(1e4)))
``` 

## Better benchmarking (pt. 1) {.smaller}

We can do better (better precision) using the microbenchmark package 

```{r, eval=FALSE}
install.packages("microbenchmark")
```
```{r}
library(microbenchmark)

d = abs(rnorm(1000))
r = microbenchmark(
      exp(log(d)/2),
      d^0.5,
      sqrt(d),
      times = 1000
    )
print(r)
```

##

```{r, eval=FALSE}
boxplot(r)
```

<div class="centered">
```{r, echo=FALSE}
boxplot(r)
```
</div>


## Better benchmarking (pt. 2) {.smaller}

We can also do better using the rbenchmark package 

```{r, eval=FALSE}
install.packages("rbenchmark")
```
```{r}
library(rbenchmark)

d = abs(rnorm(1000))
benchmark(
  exp(log(d)/2),
  d^0.5,
  sqrt(d),
  replications = 1000,
  order = "relative"
)
```


## Exercise 3

Benchmark your functions from Exercise 1 and 2, which is fastest? Which is slowest? Why?


# Acknowledgments
## Acknowledgments

Above materials are derived in part from the following sources:

* Hadley Wickham - [Adv-R Functionals](http://adv-r.had.co.nz/Functionals.html)
* Neil Saunders - [A brief introduction to "apply" in R](http://nsaunders.wordpress.com/2010/08/20/a-brief-introduction-to-apply-in-r/)
* [R Language Definition](http://stat.ethz.ch/R-manual/R-devel/doc/manual/R-lang.html)


